# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommentEntity {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: ProductEntity!
  user: UserEntity!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LikeEntity {
  id: ID!
  product: ProductEntity!
  user: UserEntity!
}

type ProductEntity {
  id: ID!
  description: String!
  price: Float!
  quantity: Float!
  images: [String!]!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  vendor: UserEntity!
  comments: [CommentEntity!]!
  likes: [LikeEntity!]!
}

type ShoppingCartItemEntity {
  id: ID!
  cart: ShoppingCartEntity!
  product: ProductEntity!
  quantity: Float!
}

type ShoppingCartEntity {
  id: ID!
  user: UserEntity!
  items: [ShoppingCartItemEntity!]!
}

type MessageEntity {
  id: ID!
  content: String!
  sender: UserEntity!
  chat: ChatEntity!
  createdAt: DateTime!
}

type ChatEntity {
  id: ID!
  users: [UserEntity!]!
  messages: [MessageEntity!]
}

type UserEntity {
  id: ID!
  firstName: String!
  lastName: String!
  roles: [String!]!
  email: String!
  profilPhoto: String!
  password: String!
  products: [ProductEntity!]!
  shoppingCart: ShoppingCartEntity!
  updatedAt: DateTime!
  comments: [CommentEntity!]!
  likes: [LikeEntity!]!
  chats: [ChatEntity!]!
}

type Comment {
  id: Float!
  text: String!
  createdAt: String!
  updatedAt: String!
  user: User
  product: Product
}

type Product {
  id: Float!
  description: String!
  price: Float!
  quantity: Float!
  images: [String!]
  name: String!
  vendor: User
  comments: [Comment!]
}

type User {
  id: Float!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilPhoto: String
  roles: [String!]
  products: [Product!]
  comments: [Comment!]
}

type ErrorType {
  message: String!
  code: String
}

type UserLoginResponse {
  user: User!
  token: String!
  error: ErrorType
}

type RegisterResponse {
  activation_token: String!
  error: ErrorType
}

type ActivationResponse {
  user: User
  error: ErrorType
}

type ForgotPasswordResponse {
  message: String!
  error: ErrorType
}

type ResetPasswordResponse {
  user: User!
  error: ErrorType
}

type GetProductsResponse {
  products: [Product!]
  total: Float
  error: ErrorType
}

type GetProductResponse {
  product: Product
  error: ErrorType
}

type UploadImagesResponse {
  product: Product
  error: ErrorType
}

type UploadProfilePhotoResponse {
  profilPhoto: String
  error: ErrorType
}

type CreateProductsResponse {
  product: Product
  error: ErrorType
}

type AddCommentProductResponse {
  comment: Comment
  error: ErrorType
}

type GetCommentsResponse {
  comments: [Comment!]
  total: Float
  error: ErrorType
}

type ShoppingCartItem {
  id: Float!
  product: Product
  quantity: Float!
}

type ShoppingCart {
  id: Float!
  items: [ShoppingCartItem!]
  user: User
}

type GetSoppingCartResponse {
  shoppingCart: ShoppingCart
  error: ErrorType
}

type AddSoppingCartResponse {
  product: Product
  error: ErrorType
}

type Query {
  getAdminData: String!
  getUserData: String!
  getUsers: [User!]!
  getMe: User!
  getProducts(getProductsDto: GetProductsDto!): GetProductsResponse!
  getMyProducts(getProductsDto: GetProductsDto!): GetProductsResponse!
  getProduct(getProductDto: GetProductDto!): GetProductResponse!
  getComments(getCommentsInput: GetCommentsInput!): GetCommentsResponse!
  getMyShoppingCart: GetSoppingCartResponse!
}

input GetProductsDto {
  keyword: String
  take: Float
  skip: Float
}

input GetProductDto {
  id: Float!
}

input GetCommentsInput {
  productId: Float!
  take: Float = 10
  skip: Float = 0
}

type Mutation {
  register(userRegisterInput: UserRegisterInput!): RegisterResponse!
  activateUser(activationInput: ActivationInput!): ActivationResponse!
  login(loginInput: UserLoginInput!): UserLoginResponse!
  logout: String!
  forgotPassword(forgotPasswordInput: ForgotPasswordInput!): ForgotPasswordResponse!
  resetPassword(resetPasswordInput: ResetPasswordInput!): ResetPasswordResponse!
  profilPhotoUpload(image: Upload!): UploadProfilePhotoResponse!
  createProduct(createProductInput: CreateProductInput!): CreateProductsResponse!
  productImagesUpload(productImagesUploadDto: ProductImagesUploadDto!, images: [Upload]): UploadImagesResponse!
  addCommentProduct(addCommentProductInput: AddCommentProductInput!): AddCommentProductResponse!
  addShoppingCartProduct(addShoppingCartProductInput: AddShoppingCartProductInput!): AddSoppingCartResponse!
  removeShoppingCartItemProduct(removeShoppingCartProductInput: AddShoppingCartProductInput!): GetSoppingCartResponse!
  removeShoppingCartItem(removeShoppingCartItemInput: AddShoppingCartProductInput!): GetSoppingCartResponse!
  createChat(userIds: [Float!]!): ChatEntity!
}

input UserRegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  roles: [String!]
}

input ActivationInput {
  activationToken: String!
  activationCode: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input ForgotPasswordInput {
  email: String!
}

input ResetPasswordInput {
  password: String!
  activationToken: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateProductInput {
  description: String!
  price: Float!
  quantity: Float!
  name: String!
}

input ProductImagesUploadDto {
  id: Float!
}

input AddCommentProductInput {
  productId: Float!
  comment: String!
}

input AddShoppingCartProductInput {
  productId: Float!
}

type Subscription {
  userAdded: User!
  productCreated: Product!
  createCommentProduct(productId: Float!): Comment!
}